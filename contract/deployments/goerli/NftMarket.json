{
  "address": "0xdE1F38a7CCB1964Bfaa94B284Fa47D7cd7d6D5cE",
  "abi": [
    {
      "inputs": [],
      "name": "NftMarket__NftAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NftNotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NotEnoughFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__PriceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__UnapprovedNft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarket__WithdrawProceedFail",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ListingDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftListed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7881ac39d8e92762562e7b0aef3caadbadd2ceebd91d2df7c17b2edb892be35a",
  "receipt": {
    "to": null,
    "from": "0x7303D7E7FB9460ce1f5F32c2cBd09142Fb91b9D1",
    "contractAddress": "0xdE1F38a7CCB1964Bfaa94B284Fa47D7cd7d6D5cE",
    "transactionIndex": 42,
    "gasUsed": "1115950",
    "logsBloom": "0x
    "blockHash": "0x985e32df7faae27210cce9f4da6558df3c432d2918eb27d68e60e7c5290d03ca",
    "transactionHash": "0x7881ac39d8e92762562e7b0aef3caadbadd2ceebd91d2df7c17b2edb892be35a",
    "logs": [],
    "blockNumber": 8273357,
    "cumulativeGasUsed": "7019696",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb80654d2fa43bf25b744f7935200c66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NftMarket__NftAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NftNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NotEnoughFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__PriceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__UnapprovedNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarket__WithdrawProceedFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarket.sol\":\"NftMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NftMarket__PriceTooLow();\\r\\nerror NftMarket__UnapprovedNft();\\r\\nerror NftMarket__NftAlreadyListed();\\r\\nerror NftMarket__NotOwner();\\r\\nerror NftMarket__NftNotListed();\\r\\nerror NftMarket__NotEnoughFund();\\r\\nerror NftMarket__NoProceeds();\\r\\nerror NftMarket__WithdrawProceedFail();\\r\\n\\r\\ncontract NftMarket is ReentrancyGuard {\\r\\n\\r\\n    struct Listing {\\r\\n        address seller;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    event NftListed(address nftAddress, uint256 tokenId, address seller, uint256 price);\\r\\n    event NftBought(address nftAddress, uint256 tokenId, address buyer, uint256 price);\\r\\n    event ListingDeleted(address nftAddress, uint256 tokenId);\\r\\n\\r\\n    mapping(address => mapping(uint256 => Listing)) private listings;\\r\\n    mapping(address => uint256) private proceeds;\\r\\n\\r\\n    modifier nftNotListed(address nftAddress, uint256 tokenId) {\\r\\n        Listing memory listing = listings[nftAddress][tokenId];\\r\\n        if (listing.price <= 0) {\\r\\n            _;\\r\\n        } else {\\r\\n            revert NftMarket__NftAlreadyListed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier nftListed(address nftAddress, uint256 tokenId) {\\r\\n        Listing memory listing = listings[nftAddress][tokenId];\\r\\n        if (listing.price <= 0) {\\r\\n            revert NftMarket__NftNotListed();\\r\\n        } else {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier nftOwnerOnly(address nftAddress, uint256 tokenId) {\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        address nftOwner = nft.ownerOf(tokenId);\\r\\n        if (nftOwner == msg.sender) {\\r\\n            _;\\r\\n        } else {\\r\\n            revert NftMarket__NotOwner();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createListing(address nftAddress, uint256 tokenId, uint256 price) external nftNotListed(nftAddress, tokenId) nftOwnerOnly(nftAddress, tokenId) {\\r\\n        if (price <= 0) {\\r\\n            revert NftMarket__PriceTooLow();\\r\\n        }\\r\\n\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        if (nft.getApproved(tokenId) != address(this)) {\\r\\n            revert NftMarket__UnapprovedNft();\\r\\n        }\\r\\n\\r\\n        listings[nftAddress][tokenId] = Listing(msg.sender, price);\\r\\n\\r\\n        emit NftListed(nftAddress, tokenId, msg.sender, price);\\r\\n    }\\r\\n\\r\\n    function buyItem(address nftAddress, uint256 tokenId) external payable nonReentrant nftListed(nftAddress, tokenId) {\\r\\n        Listing memory listing = listings[nftAddress][tokenId];\\r\\n\\r\\n        if (msg.value < listing.price) {\\r\\n            revert NftMarket__NotEnoughFund();\\r\\n        }\\r\\n\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        nft.safeTransferFrom(listing.seller, msg.sender, tokenId);\\r\\n\\r\\n        proceeds[listing.seller] = proceeds[listing.seller] + msg.value;\\r\\n\\r\\n        delete listings[nftAddress][tokenId];\\r\\n\\r\\n        emit NftBought(nftAddress, tokenId, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function cancelListing(address nftAddress, uint256 tokenId) external nftListed(nftAddress, tokenId) nftOwnerOnly(nftAddress, tokenId) {\\r\\n        delete listings[nftAddress][tokenId];\\r\\n        emit ListingDeleted(nftAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    function updateListing(address nftAddress, uint256 tokenId, uint256 price) external nftListed(nftAddress, tokenId) nftOwnerOnly(nftAddress, tokenId) {\\r\\n        listings[nftAddress][tokenId].price = price;\\r\\n        emit NftListed(nftAddress, tokenId, msg.sender, price);\\r\\n    }\\r\\n\\r\\n    function withdraw() external payable {\\r\\n        uint256 fund = proceeds[msg.sender];\\r\\n        if (fund <= 0) {\\r\\n            revert NftMarket__NoProceeds();\\r\\n        }\\r\\n        bool withdrawSuccess = payable(msg.sender).send(fund);\\r\\n        if (!withdrawSuccess) {\\r\\n            revert NftMarket__WithdrawProceedFail();\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd5a21c198f3d70e9cf0c7d0f9352039f3fdf5968a16a73900798a4f2d661caa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506112eb806100286000396000f3fe60806040526004361061004a5760003560e01c806324780c561461004f5780633ccfd60b146100785780639f37092a14610082578063b2ddee061461009e578063f772adf1146100c7575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611022565b6100f0565b005b610080610519565b005b61009c60048036038101906100979190611075565b61060b565b005b3480156100aa57600080fd5b506100c560048036038101906100c09190611075565b6109ed565b005b3480156100d357600080fd5b506100ee60048036038101906100e99190611022565b610ca1565b005b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060008160200151116104df578585600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016101ff91906110c4565b602060405180830381865afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024091906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104a457600088116102af576040517f74ab794b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8c6040518263ffffffff1660e01b815260040161030491906110c4565b602060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034591906110f4565b73ffffffffffffffffffffffffffffffffffffffff1614610392576040517fbe4dd5a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018a815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507fe77c968bf19b7719db31a77b3b1392ff896ba9e80d49e57381106452c9d7cc268b8b338c6040516104969493929190611130565b60405180910390a1506104d6565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050610511565b6040517fcc47f23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610597576040517f07cd4b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050905080610607576040517f98f5ac1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610613610f30565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610712576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050806020015134101561080f576040517f11631d6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008690508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836000015133896040518463ffffffff1660e01b815260040161085593929190611175565b600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050503460026000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108d691906111db565b60026000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507fbd9ca37d39bd82cad4a35d9618ccc46b7055d04e211f817b2e6dae1267a02f70878733346040516109d49493929190611130565b60405180910390a150505050506109e9610f7f565b5050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610aec576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610b2e91906110c4565b602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f91906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c6457600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507f53df6f80c006573b58e17d6440b870b40592881a21c175cde20004a4135dd4608989604051610c5792919061120f565b60405180910390a1610c96565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610da0576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610de291906110c4565b602060405180830381865afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef25787600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600101819055507fe77c968bf19b7719db31a77b3b1392ff896ba9e80d49e57381106452c9d7cc268a8a338b604051610ee59493929190611130565b60405180910390a1610f24565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b600260005403610f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6c90611295565b60405180910390fd5b6002600081905550565b6001600081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb982610f8e565b9050919050565b610fc981610fae565b8114610fd457600080fd5b50565b600081359050610fe681610fc0565b92915050565b6000819050919050565b610fff81610fec565b811461100a57600080fd5b50565b60008135905061101c81610ff6565b92915050565b60008060006060848603121561103b5761103a610f89565b5b600061104986828701610fd7565b935050602061105a8682870161100d565b925050604061106b8682870161100d565b9150509250925092565b6000806040838503121561108c5761108b610f89565b5b600061109a85828601610fd7565b92505060206110ab8582860161100d565b9150509250929050565b6110be81610fec565b82525050565b60006020820190506110d960008301846110b5565b92915050565b6000815190506110ee81610fc0565b92915050565b60006020828403121561110a57611109610f89565b5b6000611118848285016110df565b91505092915050565b61112a81610fae565b82525050565b60006080820190506111456000830187611121565b61115260208301866110b5565b61115f6040830185611121565b61116c60608301846110b5565b95945050505050565b600060608201905061118a6000830186611121565b6111976020830185611121565b6111a460408301846110b5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111e682610fec565b91506111f183610fec565b9250828201905080821115611209576112086111ac565b5b92915050565b60006040820190506112246000830185611121565b61123160208301846110b5565b9392505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061127f601f83611238565b915061128a82611249565b602082019050919050565b600060208201905081810360008301526112ae81611272565b905091905056fea2646970667358221220ba7e12993524bc7ea6d8450700e86800c1a146090580906193711310a281e9ef64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c806324780c561461004f5780633ccfd60b146100785780639f37092a14610082578063b2ddee061461009e578063f772adf1146100c7575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611022565b6100f0565b005b610080610519565b005b61009c60048036038101906100979190611075565b61060b565b005b3480156100aa57600080fd5b506100c560048036038101906100c09190611075565b6109ed565b005b3480156100d357600080fd5b506100ee60048036038101906100e99190611022565b610ca1565b005b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060008160200151116104df578585600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016101ff91906110c4565b602060405180830381865afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024091906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104a457600088116102af576040517f74ab794b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8c6040518263ffffffff1660e01b815260040161030491906110c4565b602060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034591906110f4565b73ffffffffffffffffffffffffffffffffffffffff1614610392576040517fbe4dd5a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018a815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507fe77c968bf19b7719db31a77b3b1392ff896ba9e80d49e57381106452c9d7cc268b8b338c6040516104969493929190611130565b60405180910390a1506104d6565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050610511565b6040517fcc47f23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610597576040517f07cd4b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050905080610607576040517f98f5ac1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610613610f30565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610712576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050806020015134101561080f576040517f11631d6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008690508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836000015133896040518463ffffffff1660e01b815260040161085593929190611175565b600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050503460026000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108d691906111db565b60026000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507fbd9ca37d39bd82cad4a35d9618ccc46b7055d04e211f817b2e6dae1267a02f70878733346040516109d49493929190611130565b60405180910390a150505050506109e9610f7f565b5050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610aec576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610b2e91906110c4565b602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f91906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c6457600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507f53df6f80c006573b58e17d6440b870b40592881a21c175cde20004a4135dd4608989604051610c5792919061120f565b60405180910390a1610c96565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816020015111610da0576040517f60bd97a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585600082905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610de291906110c4565b602060405180830381865afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906110f4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef25787600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600101819055507fe77c968bf19b7719db31a77b3b1392ff896ba9e80d49e57381106452c9d7cc268a8a338b604051610ee59493929190611130565b60405180910390a1610f24565b6040517f732bfb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b600260005403610f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6c90611295565b60405180910390fd5b6002600081905550565b6001600081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb982610f8e565b9050919050565b610fc981610fae565b8114610fd457600080fd5b50565b600081359050610fe681610fc0565b92915050565b6000819050919050565b610fff81610fec565b811461100a57600080fd5b50565b60008135905061101c81610ff6565b92915050565b60008060006060848603121561103b5761103a610f89565b5b600061104986828701610fd7565b935050602061105a8682870161100d565b925050604061106b8682870161100d565b9150509250925092565b6000806040838503121561108c5761108b610f89565b5b600061109a85828601610fd7565b92505060206110ab8582860161100d565b9150509250929050565b6110be81610fec565b82525050565b60006020820190506110d960008301846110b5565b92915050565b6000815190506110ee81610fc0565b92915050565b60006020828403121561110a57611109610f89565b5b6000611118848285016110df565b91505092915050565b61112a81610fae565b82525050565b60006080820190506111456000830187611121565b61115260208301866110b5565b61115f6040830185611121565b61116c60608301846110b5565b95945050505050565b600060608201905061118a6000830186611121565b6111976020830185611121565b6111a460408301846110b5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111e682610fec565b91506111f183610fec565b9250828201905080821115611209576112086111ac565b5b92915050565b60006040820190506112246000830185611121565b61123160208301846110b5565b9392505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061127f601f83611238565b915061128a82611249565b602082019050919050565b600060208201905081810360008301526112ae81611272565b905091905056fea2646970667358221220ba7e12993524bc7ea6d8450700e86800c1a146090580906193711310a281e9ef64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NftMarket.sol:NftMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2762,
        "contract": "contracts/NftMarket.sol:NftMarket",
        "label": "listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2729_storage))"
      },
      {
        "astId": 2766,
        "contract": "contracts/NftMarket.sol:NftMarket",
        "label": "proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2729_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarket.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2729_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2729_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarket.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2729_storage"
      },
      "t_struct(Listing)2729_storage": {
        "encoding": "inplace",
        "label": "struct NftMarket.Listing",
        "members": [
          {
            "astId": 2726,
            "contract": "contracts/NftMarket.sol:NftMarket",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2728,
            "contract": "contracts/NftMarket.sol:NftMarket",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}